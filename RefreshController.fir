;buildInfoPackage: chisel3, version: 3.0.2, scalaVersion: 2.11.11, sbtVersion: 0.13.16, builtAtString: 2018-02-05 23:25:31.873, builtAtMillis: 1517873131873
circuit RefreshController : 
  module I2cController : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {clock_threshold : UInt<64>, clock_period : UInt<64>}, flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {size : UInt<8>, address : UInt<8>, header : UInt<8>, payload : UInt<8>[16]}}, i2c : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, error : UInt<1>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[i2c-controller.scala 16:24]
    reg packet : UInt<8>[18], clock @[i2c-controller.scala 18:21]
    reg packet_size : UInt<8>, clock @[i2c-controller.scala 19:26]
    wire sda_state : UInt @[i2c-controller.scala 21:25]
    wire scl_state : UInt @[i2c-controller.scala 22:25]
    reg clock_counter : UInt<64>, clock @[i2c-controller.scala 24:28]
    reg beat_counter : UInt<64>, clock @[i2c-controller.scala 25:27]
    reg data_counter : UInt<64>, clock @[i2c-controller.scala 26:27]
    node pulse = geq(clock_counter, io.config.clock_threshold) @[i2c-controller.scala 28:31]
    node rising_edge = eq(clock_counter, io.config.clock_threshold) @[i2c-controller.scala 29:37]
    node beat_finished = geq(clock_counter, io.config.clock_period) @[i2c-controller.scala 30:39]
    node _T_56 = add(data_counter, UInt<1>("h01")) @[i2c-controller.scala 32:45]
    node _T_57 = tail(_T_56, 1) @[i2c-controller.scala 32:45]
    node _T_59 = bits(_T_57, 4, 0)
    node _T_60 = bits(packet[_T_59], 0, 0) @[i2c-controller.scala 32:52]
    node _T_61 = bits(packet[_T_59], 1, 1) @[i2c-controller.scala 32:52]
    node _T_62 = bits(packet[_T_59], 2, 2) @[i2c-controller.scala 32:52]
    node _T_63 = bits(packet[_T_59], 3, 3) @[i2c-controller.scala 32:52]
    node _T_64 = bits(packet[_T_59], 4, 4) @[i2c-controller.scala 32:52]
    node _T_65 = bits(packet[_T_59], 5, 5) @[i2c-controller.scala 32:52]
    node _T_66 = bits(packet[_T_59], 6, 6) @[i2c-controller.scala 32:52]
    node _T_67 = bits(packet[_T_59], 7, 7) @[i2c-controller.scala 32:52]
    wire next_data : UInt<1>[8] @[i2c-controller.scala 32:24]
    next_data[0] <= _T_60 @[i2c-controller.scala 32:24]
    next_data[1] <= _T_61 @[i2c-controller.scala 32:24]
    next_data[2] <= _T_62 @[i2c-controller.scala 32:24]
    next_data[3] <= _T_63 @[i2c-controller.scala 32:24]
    next_data[4] <= _T_64 @[i2c-controller.scala 32:24]
    next_data[5] <= _T_65 @[i2c-controller.scala 32:24]
    next_data[6] <= _T_66 @[i2c-controller.scala 32:24]
    next_data[7] <= _T_67 @[i2c-controller.scala 32:24]
    wire _T_90 : UInt<1>[8] @[i2c-controller.scala 33:31]
    _T_90[0] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[1] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[2] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[3] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[4] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[5] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[6] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[7] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    reg data_reg : UInt<1>[8], clock with : (reset => (reset, _T_90)) @[i2c-controller.scala 33:27]
    wire data_out : UInt<1> @[i2c-controller.scala 34:24]
    node _T_152 = eq(UInt<1>("h01"), scl_state) @[Mux.scala 46:19]
    node _T_153 = mux(_T_152, pulse, UInt<1>("h01")) @[Mux.scala 46:16]
    node _T_154 = eq(UInt<1>("h00"), scl_state) @[Mux.scala 46:19]
    node _T_155 = mux(_T_154, UInt<1>("h01"), _T_153) @[Mux.scala 46:16]
    io.i2c.scl <= _T_155 @[i2c-controller.scala 42:16]
    node _T_159 = eq(UInt<2>("h02"), sda_state) @[Mux.scala 46:19]
    node _T_160 = mux(_T_159, data_out, UInt<1>("h01")) @[Mux.scala 46:16]
    node _T_161 = eq(UInt<1>("h01"), sda_state) @[Mux.scala 46:19]
    node _T_162 = mux(_T_161, UInt<1>("h00"), _T_160) @[Mux.scala 46:16]
    node _T_163 = eq(UInt<1>("h00"), sda_state) @[Mux.scala 46:19]
    node _T_164 = mux(_T_163, UInt<1>("h01"), _T_162) @[Mux.scala 46:16]
    io.i2c.sda <= _T_164 @[i2c-controller.scala 45:16]
    sda_state <= UInt<1>("h00") @[i2c-controller.scala 53:15]
    scl_state <= UInt<1>("h00") @[i2c-controller.scala 54:15]
    io.request.ready <= UInt<1>("h00") @[i2c-controller.scala 56:22]
    io.error <= UInt<1>("h00") @[i2c-controller.scala 57:14]
    node _T_170 = bits(beat_counter, 2, 0)
    data_out <= data_reg[_T_170] @[i2c-controller.scala 58:14]
    node _T_172 = add(clock_counter, UInt<1>("h01")) @[i2c-controller.scala 59:36]
    node _T_173 = tail(_T_172, 1) @[i2c-controller.scala 59:36]
    clock_counter <= _T_173 @[i2c-controller.scala 59:19]
    node _T_174 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_174 : @[Conditional.scala 40:58]
      sda_state <= UInt<1>("h00") @[i2c-controller.scala 68:23]
      scl_state <= UInt<1>("h00") @[i2c-controller.scala 69:23]
      io.request.ready <= UInt<1>("h01") @[i2c-controller.scala 72:30]
      node _T_176 = and(io.request.ready, io.request.valid) @[Decoupled.scala 30:37]
      when _T_176 : @[i2c-controller.scala 74:38]
        state <= UInt<3>("h01") @[i2c-controller.scala 75:23]
        packet_size <= io.request.bits.size @[i2c-controller.scala 77:29]
        data_counter <= UInt<1>("h00") @[i2c-controller.scala 79:30]
        clock_counter <= UInt<1>("h00") @[i2c-controller.scala 80:31]
        beat_counter <= UInt<1>("h00") @[i2c-controller.scala 81:30]
        packet[0] <= io.request.bits.address @[i2c-controller.scala 83:27]
        packet[1] <= io.request.bits.header @[i2c-controller.scala 84:27]
        packet[2] <= io.request.bits.payload[0] @[i2c-controller.scala 87:35]
        packet[3] <= io.request.bits.payload[1] @[i2c-controller.scala 87:35]
        packet[4] <= io.request.bits.payload[2] @[i2c-controller.scala 87:35]
        packet[5] <= io.request.bits.payload[3] @[i2c-controller.scala 87:35]
        packet[6] <= io.request.bits.payload[4] @[i2c-controller.scala 87:35]
        packet[7] <= io.request.bits.payload[5] @[i2c-controller.scala 87:35]
        packet[8] <= io.request.bits.payload[6] @[i2c-controller.scala 87:35]
        packet[9] <= io.request.bits.payload[7] @[i2c-controller.scala 87:35]
        packet[10] <= io.request.bits.payload[8] @[i2c-controller.scala 87:35]
        packet[11] <= io.request.bits.payload[9] @[i2c-controller.scala 87:35]
        packet[12] <= io.request.bits.payload[10] @[i2c-controller.scala 87:35]
        packet[13] <= io.request.bits.payload[11] @[i2c-controller.scala 87:35]
        packet[14] <= io.request.bits.payload[12] @[i2c-controller.scala 87:35]
        packet[15] <= io.request.bits.payload[13] @[i2c-controller.scala 87:35]
        packet[16] <= io.request.bits.payload[14] @[i2c-controller.scala 87:35]
        packet[17] <= io.request.bits.payload[15] @[i2c-controller.scala 87:35]
        skip @[i2c-controller.scala 74:38]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_180 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_180 : @[Conditional.scala 39:67]
        sda_state <= UInt<1>("h01") @[i2c-controller.scala 95:23]
        scl_state <= UInt<1>("h00") @[i2c-controller.scala 96:23]
        when pulse : @[i2c-controller.scala 100:26]
          clock_counter <= UInt<1>("h00") @[i2c-controller.scala 101:31]
          node _T_182 = bits(packet[0], 0, 0) @[i2c-controller.scala 102:43]
          node _T_183 = bits(packet[0], 1, 1) @[i2c-controller.scala 102:43]
          node _T_184 = bits(packet[0], 2, 2) @[i2c-controller.scala 102:43]
          node _T_185 = bits(packet[0], 3, 3) @[i2c-controller.scala 102:43]
          node _T_186 = bits(packet[0], 4, 4) @[i2c-controller.scala 102:43]
          node _T_187 = bits(packet[0], 5, 5) @[i2c-controller.scala 102:43]
          node _T_188 = bits(packet[0], 6, 6) @[i2c-controller.scala 102:43]
          node _T_189 = bits(packet[0], 7, 7) @[i2c-controller.scala 102:43]
          wire _T_192 : UInt<1>[8] @[i2c-controller.scala 102:32]
          _T_192[0] <= _T_182 @[i2c-controller.scala 102:32]
          _T_192[1] <= _T_183 @[i2c-controller.scala 102:32]
          _T_192[2] <= _T_184 @[i2c-controller.scala 102:32]
          _T_192[3] <= _T_185 @[i2c-controller.scala 102:32]
          _T_192[4] <= _T_186 @[i2c-controller.scala 102:32]
          _T_192[5] <= _T_187 @[i2c-controller.scala 102:32]
          _T_192[6] <= _T_188 @[i2c-controller.scala 102:32]
          _T_192[7] <= _T_189 @[i2c-controller.scala 102:32]
          data_reg[0] <= _T_192[0] @[i2c-controller.scala 102:26]
          data_reg[1] <= _T_192[1] @[i2c-controller.scala 102:26]
          data_reg[2] <= _T_192[2] @[i2c-controller.scala 102:26]
          data_reg[3] <= _T_192[3] @[i2c-controller.scala 102:26]
          data_reg[4] <= _T_192[4] @[i2c-controller.scala 102:26]
          data_reg[5] <= _T_192[5] @[i2c-controller.scala 102:26]
          data_reg[6] <= _T_192[6] @[i2c-controller.scala 102:26]
          data_reg[7] <= _T_192[7] @[i2c-controller.scala 102:26]
          state <= UInt<3>("h02") @[i2c-controller.scala 103:23]
          skip @[i2c-controller.scala 100:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_203 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_203 : @[Conditional.scala 39:67]
          sda_state <= UInt<2>("h02") @[i2c-controller.scala 107:23]
          scl_state <= UInt<1>("h01") @[i2c-controller.scala 108:23]
          when beat_finished : @[i2c-controller.scala 110:34]
            clock_counter <= UInt<1>("h00") @[i2c-controller.scala 111:31]
            node _T_206 = eq(beat_counter, UInt<4>("h08")) @[i2c-controller.scala 113:36]
            when _T_206 : @[i2c-controller.scala 113:45]
              beat_counter <= UInt<1>("h00") @[i2c-controller.scala 114:34]
              state <= UInt<3>("h03") @[i2c-controller.scala 115:27]
              skip @[i2c-controller.scala 113:45]
            else : @[i2c-controller.scala 117:28]
              node _T_209 = add(beat_counter, UInt<1>("h01")) @[i2c-controller.scala 118:50]
              node _T_210 = tail(_T_209, 1) @[i2c-controller.scala 118:50]
              beat_counter <= _T_210 @[i2c-controller.scala 118:34]
              skip @[i2c-controller.scala 117:28]
            skip @[i2c-controller.scala 110:34]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_211 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_211 : @[Conditional.scala 39:67]
            sda_state <= UInt<1>("h00") @[i2c-controller.scala 123:23]
            scl_state <= UInt<1>("h01") @[i2c-controller.scala 124:23]
            when beat_finished : @[i2c-controller.scala 126:34]
              clock_counter <= UInt<1>("h00") @[i2c-controller.scala 127:31]
              node _T_214 = sub(packet_size, UInt<1>("h01")) @[i2c-controller.scala 129:53]
              node _T_215 = asUInt(_T_214) @[i2c-controller.scala 129:53]
              node _T_216 = tail(_T_215, 1) @[i2c-controller.scala 129:53]
              node _T_217 = eq(data_counter, _T_216) @[i2c-controller.scala 129:36]
              when _T_217 : @[i2c-controller.scala 129:61]
                state <= UInt<3>("h05") @[i2c-controller.scala 130:27]
                skip @[i2c-controller.scala 129:61]
              else : @[i2c-controller.scala 132:28]
                node _T_219 = add(data_counter, UInt<1>("h01")) @[i2c-controller.scala 133:50]
                node _T_220 = tail(_T_219, 1) @[i2c-controller.scala 133:50]
                data_counter <= _T_220 @[i2c-controller.scala 133:34]
                data_reg[0] <= next_data[0] @[i2c-controller.scala 134:30]
                data_reg[1] <= next_data[1] @[i2c-controller.scala 134:30]
                data_reg[2] <= next_data[2] @[i2c-controller.scala 134:30]
                data_reg[3] <= next_data[3] @[i2c-controller.scala 134:30]
                data_reg[4] <= next_data[4] @[i2c-controller.scala 134:30]
                data_reg[5] <= next_data[5] @[i2c-controller.scala 134:30]
                data_reg[6] <= next_data[6] @[i2c-controller.scala 134:30]
                data_reg[7] <= next_data[7] @[i2c-controller.scala 134:30]
                state <= UInt<3>("h02") @[i2c-controller.scala 135:27]
                skip @[i2c-controller.scala 132:28]
              skip @[i2c-controller.scala 126:34]
            node _T_221 = and(rising_edge, io.i2c.scl_fb) @[i2c-controller.scala 139:31]
            when _T_221 : @[i2c-controller.scala 139:49]
              state <= UInt<3>("h04") @[i2c-controller.scala 140:23]
              skip @[i2c-controller.scala 139:49]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_222 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_222 : @[Conditional.scala 39:67]
              io.error <= UInt<1>("h01") @[i2c-controller.scala 144:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_224 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_224 : @[Conditional.scala 39:67]
                sda_state <= UInt<1>("h01") @[i2c-controller.scala 147:23]
                scl_state <= UInt<1>("h00") @[i2c-controller.scala 148:23]
                when pulse : @[i2c-controller.scala 150:26]
                  state <= UInt<3>("h00") @[i2c-controller.scala 151:23]
                  skip @[i2c-controller.scala 150:26]
                skip @[Conditional.scala 39:67]
    
  module TlcController : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {i2c_config : {clock_threshold : UInt<64>, clock_period : UInt<64>}, mode1 : UInt<8>, mode2 : UInt<8>, iref : UInt<8>}, flip update : UInt<1>, ready : UInt<1>, i2c : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, flip led_state_in : UInt<2>[16]}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[tlc-controller.scala 21:24]
    inst i2c_ctrl of I2cController @[tlc-controller.scala 23:26]
    i2c_ctrl.clock <= clock
    i2c_ctrl.reset <= reset
    i2c_ctrl.io.config.clock_period <= io.config.i2c_config.clock_period @[tlc-controller.scala 24:24]
    i2c_ctrl.io.config.clock_threshold <= io.config.i2c_config.clock_threshold @[tlc-controller.scala 24:24]
    io.i2c.sda <= i2c_ctrl.io.i2c.sda @[tlc-controller.scala 26:16]
    io.i2c.scl <= i2c_ctrl.io.i2c.scl @[tlc-controller.scala 27:16]
    io.i2c.resetn <= UInt<1>("h01") @[tlc-controller.scala 29:19]
    i2c_ctrl.io.request.valid <= UInt<1>("h00") @[tlc-controller.scala 32:31]
    i2c_ctrl.io.request.bits.size <= UInt<1>("h00") @[tlc-controller.scala 33:35]
    i2c_ctrl.io.request.bits.address <= UInt<1>("h00") @[tlc-controller.scala 34:38]
    i2c_ctrl.io.request.bits.header <= UInt<1>("h00") @[tlc-controller.scala 35:37]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    when i2c_ctrl.io.error : @[tlc-controller.scala 41:30]
      state <= UInt<3>("h04") @[tlc-controller.scala 42:15]
      skip @[tlc-controller.scala 41:30]
    node _T_51 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_51 : @[Conditional.scala 40:58]
      i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
      i2c_ctrl.io.request.bits.size <= UInt<1>("h01") @[tlc-controller.scala 47:39]
      i2c_ctrl.io.request.bits.address <= UInt<8>("h0d6") @[tlc-controller.scala 48:42]
      i2c_ctrl.io.request.bits.header <= UInt<8>("h0a5") @[tlc-controller.scala 49:41]
      node _T_56 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
      when _T_56 : @[tlc-controller.scala 51:43]
        state <= UInt<3>("h01") @[tlc-controller.scala 52:19]
        skip @[tlc-controller.scala 51:43]
      i2c_ctrl.io.request.bits.payload[0] <= UInt<7>("h05a") @[tlc-controller.scala 59:49]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_58 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_58 : @[Conditional.scala 39:67]
        node _T_97 = or(UInt<8>("h080"), UInt<8>("h00")) @[tlc-controller.scala 62:53]
        i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
        i2c_ctrl.io.request.bits.size <= UInt<2>("h02") @[tlc-controller.scala 47:39]
        i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 48:42]
        i2c_ctrl.io.request.bits.header <= _T_97 @[tlc-controller.scala 49:41]
        node _T_100 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
        when _T_100 : @[tlc-controller.scala 51:43]
          state <= UInt<3>("h02") @[tlc-controller.scala 52:19]
          skip @[tlc-controller.scala 51:43]
        i2c_ctrl.io.request.bits.payload[0] <= io.config.mode1 @[tlc-controller.scala 63:49]
        i2c_ctrl.io.request.bits.payload[1] <= io.config.mode2 @[tlc-controller.scala 64:49]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_101 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_101 : @[Conditional.scala 39:67]
          node _T_102 = or(UInt<8>("h080"), UInt<8>("h00")) @[tlc-controller.scala 67:53]
          i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
          i2c_ctrl.io.request.bits.size <= UInt<1>("h01") @[tlc-controller.scala 47:39]
          i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 48:42]
          i2c_ctrl.io.request.bits.header <= _T_102 @[tlc-controller.scala 49:41]
          node _T_105 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
          when _T_105 : @[tlc-controller.scala 51:43]
            state <= UInt<3>("h03") @[tlc-controller.scala 52:19]
            skip @[tlc-controller.scala 51:43]
          i2c_ctrl.io.request.bits.payload[0] <= io.config.iref @[tlc-controller.scala 68:49]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_106 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_106 : @[Conditional.scala 39:67]
            i2c_ctrl.io.request.valid <= io.update @[tlc-controller.scala 71:39]
            i2c_ctrl.io.request.bits.size <= UInt<3>("h04") @[tlc-controller.scala 72:43]
            i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 73:46]
            node _T_108 = or(UInt<8>("h080"), UInt<8>("h014")) @[tlc-controller.scala 74:60]
            i2c_ctrl.io.request.bits.header <= _T_108 @[tlc-controller.scala 74:45]
            node _T_109 = cat(io.led_state_in[1], io.led_state_in[0]) @[Cat.scala 30:58]
            node _T_110 = cat(io.led_state_in[3], io.led_state_in[2]) @[Cat.scala 30:58]
            node _T_111 = cat(_T_110, _T_109) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[0] <= _T_111 @[tlc-controller.scala 77:53]
            node _T_112 = cat(io.led_state_in[5], io.led_state_in[4]) @[Cat.scala 30:58]
            node _T_113 = cat(io.led_state_in[7], io.led_state_in[6]) @[Cat.scala 30:58]
            node _T_114 = cat(_T_113, _T_112) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[1] <= _T_114 @[tlc-controller.scala 77:53]
            node _T_115 = cat(io.led_state_in[9], io.led_state_in[8]) @[Cat.scala 30:58]
            node _T_116 = cat(io.led_state_in[11], io.led_state_in[10]) @[Cat.scala 30:58]
            node _T_117 = cat(_T_116, _T_115) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[2] <= _T_117 @[tlc-controller.scala 77:53]
            node _T_118 = cat(io.led_state_in[13], io.led_state_in[12]) @[Cat.scala 30:58]
            node _T_119 = cat(io.led_state_in[15], io.led_state_in[14]) @[Cat.scala 30:58]
            node _T_120 = cat(_T_119, _T_118) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[3] <= _T_120 @[tlc-controller.scala 77:53]
            io.ready <= i2c_ctrl.io.request.ready @[tlc-controller.scala 85:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_121 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_121 : @[Conditional.scala 39:67]
              io.i2c.resetn <= UInt<1>("h00") @[tlc-controller.scala 88:27]
              skip @[Conditional.scala 39:67]
    
  module I2cController_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {clock_threshold : UInt<64>, clock_period : UInt<64>}, flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {size : UInt<8>, address : UInt<8>, header : UInt<8>, payload : UInt<8>[16]}}, i2c : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, error : UInt<1>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[i2c-controller.scala 16:24]
    reg packet : UInt<8>[18], clock @[i2c-controller.scala 18:21]
    reg packet_size : UInt<8>, clock @[i2c-controller.scala 19:26]
    wire sda_state : UInt @[i2c-controller.scala 21:25]
    wire scl_state : UInt @[i2c-controller.scala 22:25]
    reg clock_counter : UInt<64>, clock @[i2c-controller.scala 24:28]
    reg beat_counter : UInt<64>, clock @[i2c-controller.scala 25:27]
    reg data_counter : UInt<64>, clock @[i2c-controller.scala 26:27]
    node pulse = geq(clock_counter, io.config.clock_threshold) @[i2c-controller.scala 28:31]
    node rising_edge = eq(clock_counter, io.config.clock_threshold) @[i2c-controller.scala 29:37]
    node beat_finished = geq(clock_counter, io.config.clock_period) @[i2c-controller.scala 30:39]
    node _T_56 = add(data_counter, UInt<1>("h01")) @[i2c-controller.scala 32:45]
    node _T_57 = tail(_T_56, 1) @[i2c-controller.scala 32:45]
    node _T_59 = bits(_T_57, 4, 0)
    node _T_60 = bits(packet[_T_59], 0, 0) @[i2c-controller.scala 32:52]
    node _T_61 = bits(packet[_T_59], 1, 1) @[i2c-controller.scala 32:52]
    node _T_62 = bits(packet[_T_59], 2, 2) @[i2c-controller.scala 32:52]
    node _T_63 = bits(packet[_T_59], 3, 3) @[i2c-controller.scala 32:52]
    node _T_64 = bits(packet[_T_59], 4, 4) @[i2c-controller.scala 32:52]
    node _T_65 = bits(packet[_T_59], 5, 5) @[i2c-controller.scala 32:52]
    node _T_66 = bits(packet[_T_59], 6, 6) @[i2c-controller.scala 32:52]
    node _T_67 = bits(packet[_T_59], 7, 7) @[i2c-controller.scala 32:52]
    wire next_data : UInt<1>[8] @[i2c-controller.scala 32:24]
    next_data[0] <= _T_60 @[i2c-controller.scala 32:24]
    next_data[1] <= _T_61 @[i2c-controller.scala 32:24]
    next_data[2] <= _T_62 @[i2c-controller.scala 32:24]
    next_data[3] <= _T_63 @[i2c-controller.scala 32:24]
    next_data[4] <= _T_64 @[i2c-controller.scala 32:24]
    next_data[5] <= _T_65 @[i2c-controller.scala 32:24]
    next_data[6] <= _T_66 @[i2c-controller.scala 32:24]
    next_data[7] <= _T_67 @[i2c-controller.scala 32:24]
    wire _T_90 : UInt<1>[8] @[i2c-controller.scala 33:31]
    _T_90[0] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[1] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[2] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[3] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[4] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[5] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[6] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[7] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    reg data_reg : UInt<1>[8], clock with : (reset => (reset, _T_90)) @[i2c-controller.scala 33:27]
    wire data_out : UInt<1> @[i2c-controller.scala 34:24]
    node _T_152 = eq(UInt<1>("h01"), scl_state) @[Mux.scala 46:19]
    node _T_153 = mux(_T_152, pulse, UInt<1>("h01")) @[Mux.scala 46:16]
    node _T_154 = eq(UInt<1>("h00"), scl_state) @[Mux.scala 46:19]
    node _T_155 = mux(_T_154, UInt<1>("h01"), _T_153) @[Mux.scala 46:16]
    io.i2c.scl <= _T_155 @[i2c-controller.scala 42:16]
    node _T_159 = eq(UInt<2>("h02"), sda_state) @[Mux.scala 46:19]
    node _T_160 = mux(_T_159, data_out, UInt<1>("h01")) @[Mux.scala 46:16]
    node _T_161 = eq(UInt<1>("h01"), sda_state) @[Mux.scala 46:19]
    node _T_162 = mux(_T_161, UInt<1>("h00"), _T_160) @[Mux.scala 46:16]
    node _T_163 = eq(UInt<1>("h00"), sda_state) @[Mux.scala 46:19]
    node _T_164 = mux(_T_163, UInt<1>("h01"), _T_162) @[Mux.scala 46:16]
    io.i2c.sda <= _T_164 @[i2c-controller.scala 45:16]
    sda_state <= UInt<1>("h00") @[i2c-controller.scala 53:15]
    scl_state <= UInt<1>("h00") @[i2c-controller.scala 54:15]
    io.request.ready <= UInt<1>("h00") @[i2c-controller.scala 56:22]
    io.error <= UInt<1>("h00") @[i2c-controller.scala 57:14]
    node _T_170 = bits(beat_counter, 2, 0)
    data_out <= data_reg[_T_170] @[i2c-controller.scala 58:14]
    node _T_172 = add(clock_counter, UInt<1>("h01")) @[i2c-controller.scala 59:36]
    node _T_173 = tail(_T_172, 1) @[i2c-controller.scala 59:36]
    clock_counter <= _T_173 @[i2c-controller.scala 59:19]
    node _T_174 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_174 : @[Conditional.scala 40:58]
      sda_state <= UInt<1>("h00") @[i2c-controller.scala 68:23]
      scl_state <= UInt<1>("h00") @[i2c-controller.scala 69:23]
      io.request.ready <= UInt<1>("h01") @[i2c-controller.scala 72:30]
      node _T_176 = and(io.request.ready, io.request.valid) @[Decoupled.scala 30:37]
      when _T_176 : @[i2c-controller.scala 74:38]
        state <= UInt<3>("h01") @[i2c-controller.scala 75:23]
        packet_size <= io.request.bits.size @[i2c-controller.scala 77:29]
        data_counter <= UInt<1>("h00") @[i2c-controller.scala 79:30]
        clock_counter <= UInt<1>("h00") @[i2c-controller.scala 80:31]
        beat_counter <= UInt<1>("h00") @[i2c-controller.scala 81:30]
        packet[0] <= io.request.bits.address @[i2c-controller.scala 83:27]
        packet[1] <= io.request.bits.header @[i2c-controller.scala 84:27]
        packet[2] <= io.request.bits.payload[0] @[i2c-controller.scala 87:35]
        packet[3] <= io.request.bits.payload[1] @[i2c-controller.scala 87:35]
        packet[4] <= io.request.bits.payload[2] @[i2c-controller.scala 87:35]
        packet[5] <= io.request.bits.payload[3] @[i2c-controller.scala 87:35]
        packet[6] <= io.request.bits.payload[4] @[i2c-controller.scala 87:35]
        packet[7] <= io.request.bits.payload[5] @[i2c-controller.scala 87:35]
        packet[8] <= io.request.bits.payload[6] @[i2c-controller.scala 87:35]
        packet[9] <= io.request.bits.payload[7] @[i2c-controller.scala 87:35]
        packet[10] <= io.request.bits.payload[8] @[i2c-controller.scala 87:35]
        packet[11] <= io.request.bits.payload[9] @[i2c-controller.scala 87:35]
        packet[12] <= io.request.bits.payload[10] @[i2c-controller.scala 87:35]
        packet[13] <= io.request.bits.payload[11] @[i2c-controller.scala 87:35]
        packet[14] <= io.request.bits.payload[12] @[i2c-controller.scala 87:35]
        packet[15] <= io.request.bits.payload[13] @[i2c-controller.scala 87:35]
        packet[16] <= io.request.bits.payload[14] @[i2c-controller.scala 87:35]
        packet[17] <= io.request.bits.payload[15] @[i2c-controller.scala 87:35]
        skip @[i2c-controller.scala 74:38]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_180 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_180 : @[Conditional.scala 39:67]
        sda_state <= UInt<1>("h01") @[i2c-controller.scala 95:23]
        scl_state <= UInt<1>("h00") @[i2c-controller.scala 96:23]
        when pulse : @[i2c-controller.scala 100:26]
          clock_counter <= UInt<1>("h00") @[i2c-controller.scala 101:31]
          node _T_182 = bits(packet[0], 0, 0) @[i2c-controller.scala 102:43]
          node _T_183 = bits(packet[0], 1, 1) @[i2c-controller.scala 102:43]
          node _T_184 = bits(packet[0], 2, 2) @[i2c-controller.scala 102:43]
          node _T_185 = bits(packet[0], 3, 3) @[i2c-controller.scala 102:43]
          node _T_186 = bits(packet[0], 4, 4) @[i2c-controller.scala 102:43]
          node _T_187 = bits(packet[0], 5, 5) @[i2c-controller.scala 102:43]
          node _T_188 = bits(packet[0], 6, 6) @[i2c-controller.scala 102:43]
          node _T_189 = bits(packet[0], 7, 7) @[i2c-controller.scala 102:43]
          wire _T_192 : UInt<1>[8] @[i2c-controller.scala 102:32]
          _T_192[0] <= _T_182 @[i2c-controller.scala 102:32]
          _T_192[1] <= _T_183 @[i2c-controller.scala 102:32]
          _T_192[2] <= _T_184 @[i2c-controller.scala 102:32]
          _T_192[3] <= _T_185 @[i2c-controller.scala 102:32]
          _T_192[4] <= _T_186 @[i2c-controller.scala 102:32]
          _T_192[5] <= _T_187 @[i2c-controller.scala 102:32]
          _T_192[6] <= _T_188 @[i2c-controller.scala 102:32]
          _T_192[7] <= _T_189 @[i2c-controller.scala 102:32]
          data_reg[0] <= _T_192[0] @[i2c-controller.scala 102:26]
          data_reg[1] <= _T_192[1] @[i2c-controller.scala 102:26]
          data_reg[2] <= _T_192[2] @[i2c-controller.scala 102:26]
          data_reg[3] <= _T_192[3] @[i2c-controller.scala 102:26]
          data_reg[4] <= _T_192[4] @[i2c-controller.scala 102:26]
          data_reg[5] <= _T_192[5] @[i2c-controller.scala 102:26]
          data_reg[6] <= _T_192[6] @[i2c-controller.scala 102:26]
          data_reg[7] <= _T_192[7] @[i2c-controller.scala 102:26]
          state <= UInt<3>("h02") @[i2c-controller.scala 103:23]
          skip @[i2c-controller.scala 100:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_203 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_203 : @[Conditional.scala 39:67]
          sda_state <= UInt<2>("h02") @[i2c-controller.scala 107:23]
          scl_state <= UInt<1>("h01") @[i2c-controller.scala 108:23]
          when beat_finished : @[i2c-controller.scala 110:34]
            clock_counter <= UInt<1>("h00") @[i2c-controller.scala 111:31]
            node _T_206 = eq(beat_counter, UInt<4>("h08")) @[i2c-controller.scala 113:36]
            when _T_206 : @[i2c-controller.scala 113:45]
              beat_counter <= UInt<1>("h00") @[i2c-controller.scala 114:34]
              state <= UInt<3>("h03") @[i2c-controller.scala 115:27]
              skip @[i2c-controller.scala 113:45]
            else : @[i2c-controller.scala 117:28]
              node _T_209 = add(beat_counter, UInt<1>("h01")) @[i2c-controller.scala 118:50]
              node _T_210 = tail(_T_209, 1) @[i2c-controller.scala 118:50]
              beat_counter <= _T_210 @[i2c-controller.scala 118:34]
              skip @[i2c-controller.scala 117:28]
            skip @[i2c-controller.scala 110:34]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_211 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_211 : @[Conditional.scala 39:67]
            sda_state <= UInt<1>("h00") @[i2c-controller.scala 123:23]
            scl_state <= UInt<1>("h01") @[i2c-controller.scala 124:23]
            when beat_finished : @[i2c-controller.scala 126:34]
              clock_counter <= UInt<1>("h00") @[i2c-controller.scala 127:31]
              node _T_214 = sub(packet_size, UInt<1>("h01")) @[i2c-controller.scala 129:53]
              node _T_215 = asUInt(_T_214) @[i2c-controller.scala 129:53]
              node _T_216 = tail(_T_215, 1) @[i2c-controller.scala 129:53]
              node _T_217 = eq(data_counter, _T_216) @[i2c-controller.scala 129:36]
              when _T_217 : @[i2c-controller.scala 129:61]
                state <= UInt<3>("h05") @[i2c-controller.scala 130:27]
                skip @[i2c-controller.scala 129:61]
              else : @[i2c-controller.scala 132:28]
                node _T_219 = add(data_counter, UInt<1>("h01")) @[i2c-controller.scala 133:50]
                node _T_220 = tail(_T_219, 1) @[i2c-controller.scala 133:50]
                data_counter <= _T_220 @[i2c-controller.scala 133:34]
                data_reg[0] <= next_data[0] @[i2c-controller.scala 134:30]
                data_reg[1] <= next_data[1] @[i2c-controller.scala 134:30]
                data_reg[2] <= next_data[2] @[i2c-controller.scala 134:30]
                data_reg[3] <= next_data[3] @[i2c-controller.scala 134:30]
                data_reg[4] <= next_data[4] @[i2c-controller.scala 134:30]
                data_reg[5] <= next_data[5] @[i2c-controller.scala 134:30]
                data_reg[6] <= next_data[6] @[i2c-controller.scala 134:30]
                data_reg[7] <= next_data[7] @[i2c-controller.scala 134:30]
                state <= UInt<3>("h02") @[i2c-controller.scala 135:27]
                skip @[i2c-controller.scala 132:28]
              skip @[i2c-controller.scala 126:34]
            node _T_221 = and(rising_edge, io.i2c.scl_fb) @[i2c-controller.scala 139:31]
            when _T_221 : @[i2c-controller.scala 139:49]
              state <= UInt<3>("h04") @[i2c-controller.scala 140:23]
              skip @[i2c-controller.scala 139:49]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_222 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_222 : @[Conditional.scala 39:67]
              io.error <= UInt<1>("h01") @[i2c-controller.scala 144:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_224 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_224 : @[Conditional.scala 39:67]
                sda_state <= UInt<1>("h01") @[i2c-controller.scala 147:23]
                scl_state <= UInt<1>("h00") @[i2c-controller.scala 148:23]
                when pulse : @[i2c-controller.scala 150:26]
                  state <= UInt<3>("h00") @[i2c-controller.scala 151:23]
                  skip @[i2c-controller.scala 150:26]
                skip @[Conditional.scala 39:67]
    
  module TlcController_1 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {i2c_config : {clock_threshold : UInt<64>, clock_period : UInt<64>}, mode1 : UInt<8>, mode2 : UInt<8>, iref : UInt<8>}, flip update : UInt<1>, ready : UInt<1>, i2c : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, flip led_state_in : UInt<2>[16]}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[tlc-controller.scala 21:24]
    inst i2c_ctrl of I2cController_1 @[tlc-controller.scala 23:26]
    i2c_ctrl.clock <= clock
    i2c_ctrl.reset <= reset
    i2c_ctrl.io.config.clock_period <= io.config.i2c_config.clock_period @[tlc-controller.scala 24:24]
    i2c_ctrl.io.config.clock_threshold <= io.config.i2c_config.clock_threshold @[tlc-controller.scala 24:24]
    io.i2c.sda <= i2c_ctrl.io.i2c.sda @[tlc-controller.scala 26:16]
    io.i2c.scl <= i2c_ctrl.io.i2c.scl @[tlc-controller.scala 27:16]
    io.i2c.resetn <= UInt<1>("h01") @[tlc-controller.scala 29:19]
    i2c_ctrl.io.request.valid <= UInt<1>("h00") @[tlc-controller.scala 32:31]
    i2c_ctrl.io.request.bits.size <= UInt<1>("h00") @[tlc-controller.scala 33:35]
    i2c_ctrl.io.request.bits.address <= UInt<1>("h00") @[tlc-controller.scala 34:38]
    i2c_ctrl.io.request.bits.header <= UInt<1>("h00") @[tlc-controller.scala 35:37]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    when i2c_ctrl.io.error : @[tlc-controller.scala 41:30]
      state <= UInt<3>("h04") @[tlc-controller.scala 42:15]
      skip @[tlc-controller.scala 41:30]
    node _T_51 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_51 : @[Conditional.scala 40:58]
      i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
      i2c_ctrl.io.request.bits.size <= UInt<1>("h01") @[tlc-controller.scala 47:39]
      i2c_ctrl.io.request.bits.address <= UInt<8>("h0d6") @[tlc-controller.scala 48:42]
      i2c_ctrl.io.request.bits.header <= UInt<8>("h0a5") @[tlc-controller.scala 49:41]
      node _T_56 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
      when _T_56 : @[tlc-controller.scala 51:43]
        state <= UInt<3>("h01") @[tlc-controller.scala 52:19]
        skip @[tlc-controller.scala 51:43]
      i2c_ctrl.io.request.bits.payload[0] <= UInt<7>("h05a") @[tlc-controller.scala 59:49]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_58 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_58 : @[Conditional.scala 39:67]
        node _T_59 = or(UInt<8>("h080"), UInt<8>("h00")) @[tlc-controller.scala 62:53]
        i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
        i2c_ctrl.io.request.bits.size <= UInt<2>("h02") @[tlc-controller.scala 47:39]
        i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 48:42]
        i2c_ctrl.io.request.bits.header <= _T_59 @[tlc-controller.scala 49:41]
        node _T_62 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
        when _T_62 : @[tlc-controller.scala 51:43]
          state <= UInt<3>("h02") @[tlc-controller.scala 52:19]
          skip @[tlc-controller.scala 51:43]
        i2c_ctrl.io.request.bits.payload[0] <= io.config.mode1 @[tlc-controller.scala 63:49]
        i2c_ctrl.io.request.bits.payload[1] <= io.config.mode2 @[tlc-controller.scala 64:49]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_63 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_63 : @[Conditional.scala 39:67]
          node _T_64 = or(UInt<8>("h080"), UInt<8>("h00")) @[tlc-controller.scala 67:53]
          i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
          i2c_ctrl.io.request.bits.size <= UInt<1>("h01") @[tlc-controller.scala 47:39]
          i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 48:42]
          i2c_ctrl.io.request.bits.header <= _T_64 @[tlc-controller.scala 49:41]
          node _T_67 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
          when _T_67 : @[tlc-controller.scala 51:43]
            state <= UInt<3>("h03") @[tlc-controller.scala 52:19]
            skip @[tlc-controller.scala 51:43]
          i2c_ctrl.io.request.bits.payload[0] <= io.config.iref @[tlc-controller.scala 68:49]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_68 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_68 : @[Conditional.scala 39:67]
            i2c_ctrl.io.request.valid <= io.update @[tlc-controller.scala 71:39]
            i2c_ctrl.io.request.bits.size <= UInt<3>("h04") @[tlc-controller.scala 72:43]
            i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 73:46]
            node _T_70 = or(UInt<8>("h080"), UInt<8>("h014")) @[tlc-controller.scala 74:60]
            i2c_ctrl.io.request.bits.header <= _T_70 @[tlc-controller.scala 74:45]
            node _T_71 = cat(io.led_state_in[1], io.led_state_in[0]) @[Cat.scala 30:58]
            node _T_72 = cat(io.led_state_in[3], io.led_state_in[2]) @[Cat.scala 30:58]
            node _T_73 = cat(_T_72, _T_71) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[0] <= _T_73 @[tlc-controller.scala 77:53]
            node _T_74 = cat(io.led_state_in[5], io.led_state_in[4]) @[Cat.scala 30:58]
            node _T_75 = cat(io.led_state_in[7], io.led_state_in[6]) @[Cat.scala 30:58]
            node _T_76 = cat(_T_75, _T_74) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[1] <= _T_76 @[tlc-controller.scala 77:53]
            node _T_77 = cat(io.led_state_in[9], io.led_state_in[8]) @[Cat.scala 30:58]
            node _T_78 = cat(io.led_state_in[11], io.led_state_in[10]) @[Cat.scala 30:58]
            node _T_79 = cat(_T_78, _T_77) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[2] <= _T_79 @[tlc-controller.scala 77:53]
            node _T_80 = cat(io.led_state_in[13], io.led_state_in[12]) @[Cat.scala 30:58]
            node _T_81 = cat(io.led_state_in[15], io.led_state_in[14]) @[Cat.scala 30:58]
            node _T_82 = cat(_T_81, _T_80) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[3] <= _T_82 @[tlc-controller.scala 77:53]
            io.ready <= i2c_ctrl.io.request.ready @[tlc-controller.scala 85:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_83 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_83 : @[Conditional.scala 39:67]
              io.i2c.resetn <= UInt<1>("h00") @[tlc-controller.scala 88:27]
              skip @[Conditional.scala 39:67]
    
  module I2cController_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {clock_threshold : UInt<64>, clock_period : UInt<64>}, flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {size : UInt<8>, address : UInt<8>, header : UInt<8>, payload : UInt<8>[16]}}, i2c : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, error : UInt<1>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[i2c-controller.scala 16:24]
    reg packet : UInt<8>[18], clock @[i2c-controller.scala 18:21]
    reg packet_size : UInt<8>, clock @[i2c-controller.scala 19:26]
    wire sda_state : UInt @[i2c-controller.scala 21:25]
    wire scl_state : UInt @[i2c-controller.scala 22:25]
    reg clock_counter : UInt<64>, clock @[i2c-controller.scala 24:28]
    reg beat_counter : UInt<64>, clock @[i2c-controller.scala 25:27]
    reg data_counter : UInt<64>, clock @[i2c-controller.scala 26:27]
    node pulse = geq(clock_counter, io.config.clock_threshold) @[i2c-controller.scala 28:31]
    node rising_edge = eq(clock_counter, io.config.clock_threshold) @[i2c-controller.scala 29:37]
    node beat_finished = geq(clock_counter, io.config.clock_period) @[i2c-controller.scala 30:39]
    node _T_56 = add(data_counter, UInt<1>("h01")) @[i2c-controller.scala 32:45]
    node _T_57 = tail(_T_56, 1) @[i2c-controller.scala 32:45]
    node _T_59 = bits(_T_57, 4, 0)
    node _T_60 = bits(packet[_T_59], 0, 0) @[i2c-controller.scala 32:52]
    node _T_61 = bits(packet[_T_59], 1, 1) @[i2c-controller.scala 32:52]
    node _T_62 = bits(packet[_T_59], 2, 2) @[i2c-controller.scala 32:52]
    node _T_63 = bits(packet[_T_59], 3, 3) @[i2c-controller.scala 32:52]
    node _T_64 = bits(packet[_T_59], 4, 4) @[i2c-controller.scala 32:52]
    node _T_65 = bits(packet[_T_59], 5, 5) @[i2c-controller.scala 32:52]
    node _T_66 = bits(packet[_T_59], 6, 6) @[i2c-controller.scala 32:52]
    node _T_67 = bits(packet[_T_59], 7, 7) @[i2c-controller.scala 32:52]
    wire next_data : UInt<1>[8] @[i2c-controller.scala 32:24]
    next_data[0] <= _T_60 @[i2c-controller.scala 32:24]
    next_data[1] <= _T_61 @[i2c-controller.scala 32:24]
    next_data[2] <= _T_62 @[i2c-controller.scala 32:24]
    next_data[3] <= _T_63 @[i2c-controller.scala 32:24]
    next_data[4] <= _T_64 @[i2c-controller.scala 32:24]
    next_data[5] <= _T_65 @[i2c-controller.scala 32:24]
    next_data[6] <= _T_66 @[i2c-controller.scala 32:24]
    next_data[7] <= _T_67 @[i2c-controller.scala 32:24]
    wire _T_90 : UInt<1>[8] @[i2c-controller.scala 33:31]
    _T_90[0] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[1] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[2] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[3] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[4] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[5] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[6] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[7] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    reg data_reg : UInt<1>[8], clock with : (reset => (reset, _T_90)) @[i2c-controller.scala 33:27]
    wire data_out : UInt<1> @[i2c-controller.scala 34:24]
    node _T_152 = eq(UInt<1>("h01"), scl_state) @[Mux.scala 46:19]
    node _T_153 = mux(_T_152, pulse, UInt<1>("h01")) @[Mux.scala 46:16]
    node _T_154 = eq(UInt<1>("h00"), scl_state) @[Mux.scala 46:19]
    node _T_155 = mux(_T_154, UInt<1>("h01"), _T_153) @[Mux.scala 46:16]
    io.i2c.scl <= _T_155 @[i2c-controller.scala 42:16]
    node _T_159 = eq(UInt<2>("h02"), sda_state) @[Mux.scala 46:19]
    node _T_160 = mux(_T_159, data_out, UInt<1>("h01")) @[Mux.scala 46:16]
    node _T_161 = eq(UInt<1>("h01"), sda_state) @[Mux.scala 46:19]
    node _T_162 = mux(_T_161, UInt<1>("h00"), _T_160) @[Mux.scala 46:16]
    node _T_163 = eq(UInt<1>("h00"), sda_state) @[Mux.scala 46:19]
    node _T_164 = mux(_T_163, UInt<1>("h01"), _T_162) @[Mux.scala 46:16]
    io.i2c.sda <= _T_164 @[i2c-controller.scala 45:16]
    sda_state <= UInt<1>("h00") @[i2c-controller.scala 53:15]
    scl_state <= UInt<1>("h00") @[i2c-controller.scala 54:15]
    io.request.ready <= UInt<1>("h00") @[i2c-controller.scala 56:22]
    io.error <= UInt<1>("h00") @[i2c-controller.scala 57:14]
    node _T_170 = bits(beat_counter, 2, 0)
    data_out <= data_reg[_T_170] @[i2c-controller.scala 58:14]
    node _T_172 = add(clock_counter, UInt<1>("h01")) @[i2c-controller.scala 59:36]
    node _T_173 = tail(_T_172, 1) @[i2c-controller.scala 59:36]
    clock_counter <= _T_173 @[i2c-controller.scala 59:19]
    node _T_174 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_174 : @[Conditional.scala 40:58]
      sda_state <= UInt<1>("h00") @[i2c-controller.scala 68:23]
      scl_state <= UInt<1>("h00") @[i2c-controller.scala 69:23]
      io.request.ready <= UInt<1>("h01") @[i2c-controller.scala 72:30]
      node _T_176 = and(io.request.ready, io.request.valid) @[Decoupled.scala 30:37]
      when _T_176 : @[i2c-controller.scala 74:38]
        state <= UInt<3>("h01") @[i2c-controller.scala 75:23]
        packet_size <= io.request.bits.size @[i2c-controller.scala 77:29]
        data_counter <= UInt<1>("h00") @[i2c-controller.scala 79:30]
        clock_counter <= UInt<1>("h00") @[i2c-controller.scala 80:31]
        beat_counter <= UInt<1>("h00") @[i2c-controller.scala 81:30]
        packet[0] <= io.request.bits.address @[i2c-controller.scala 83:27]
        packet[1] <= io.request.bits.header @[i2c-controller.scala 84:27]
        packet[2] <= io.request.bits.payload[0] @[i2c-controller.scala 87:35]
        packet[3] <= io.request.bits.payload[1] @[i2c-controller.scala 87:35]
        packet[4] <= io.request.bits.payload[2] @[i2c-controller.scala 87:35]
        packet[5] <= io.request.bits.payload[3] @[i2c-controller.scala 87:35]
        packet[6] <= io.request.bits.payload[4] @[i2c-controller.scala 87:35]
        packet[7] <= io.request.bits.payload[5] @[i2c-controller.scala 87:35]
        packet[8] <= io.request.bits.payload[6] @[i2c-controller.scala 87:35]
        packet[9] <= io.request.bits.payload[7] @[i2c-controller.scala 87:35]
        packet[10] <= io.request.bits.payload[8] @[i2c-controller.scala 87:35]
        packet[11] <= io.request.bits.payload[9] @[i2c-controller.scala 87:35]
        packet[12] <= io.request.bits.payload[10] @[i2c-controller.scala 87:35]
        packet[13] <= io.request.bits.payload[11] @[i2c-controller.scala 87:35]
        packet[14] <= io.request.bits.payload[12] @[i2c-controller.scala 87:35]
        packet[15] <= io.request.bits.payload[13] @[i2c-controller.scala 87:35]
        packet[16] <= io.request.bits.payload[14] @[i2c-controller.scala 87:35]
        packet[17] <= io.request.bits.payload[15] @[i2c-controller.scala 87:35]
        skip @[i2c-controller.scala 74:38]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_180 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_180 : @[Conditional.scala 39:67]
        sda_state <= UInt<1>("h01") @[i2c-controller.scala 95:23]
        scl_state <= UInt<1>("h00") @[i2c-controller.scala 96:23]
        when pulse : @[i2c-controller.scala 100:26]
          clock_counter <= UInt<1>("h00") @[i2c-controller.scala 101:31]
          node _T_182 = bits(packet[0], 0, 0) @[i2c-controller.scala 102:43]
          node _T_183 = bits(packet[0], 1, 1) @[i2c-controller.scala 102:43]
          node _T_184 = bits(packet[0], 2, 2) @[i2c-controller.scala 102:43]
          node _T_185 = bits(packet[0], 3, 3) @[i2c-controller.scala 102:43]
          node _T_186 = bits(packet[0], 4, 4) @[i2c-controller.scala 102:43]
          node _T_187 = bits(packet[0], 5, 5) @[i2c-controller.scala 102:43]
          node _T_188 = bits(packet[0], 6, 6) @[i2c-controller.scala 102:43]
          node _T_189 = bits(packet[0], 7, 7) @[i2c-controller.scala 102:43]
          wire _T_192 : UInt<1>[8] @[i2c-controller.scala 102:32]
          _T_192[0] <= _T_182 @[i2c-controller.scala 102:32]
          _T_192[1] <= _T_183 @[i2c-controller.scala 102:32]
          _T_192[2] <= _T_184 @[i2c-controller.scala 102:32]
          _T_192[3] <= _T_185 @[i2c-controller.scala 102:32]
          _T_192[4] <= _T_186 @[i2c-controller.scala 102:32]
          _T_192[5] <= _T_187 @[i2c-controller.scala 102:32]
          _T_192[6] <= _T_188 @[i2c-controller.scala 102:32]
          _T_192[7] <= _T_189 @[i2c-controller.scala 102:32]
          data_reg[0] <= _T_192[0] @[i2c-controller.scala 102:26]
          data_reg[1] <= _T_192[1] @[i2c-controller.scala 102:26]
          data_reg[2] <= _T_192[2] @[i2c-controller.scala 102:26]
          data_reg[3] <= _T_192[3] @[i2c-controller.scala 102:26]
          data_reg[4] <= _T_192[4] @[i2c-controller.scala 102:26]
          data_reg[5] <= _T_192[5] @[i2c-controller.scala 102:26]
          data_reg[6] <= _T_192[6] @[i2c-controller.scala 102:26]
          data_reg[7] <= _T_192[7] @[i2c-controller.scala 102:26]
          state <= UInt<3>("h02") @[i2c-controller.scala 103:23]
          skip @[i2c-controller.scala 100:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_203 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_203 : @[Conditional.scala 39:67]
          sda_state <= UInt<2>("h02") @[i2c-controller.scala 107:23]
          scl_state <= UInt<1>("h01") @[i2c-controller.scala 108:23]
          when beat_finished : @[i2c-controller.scala 110:34]
            clock_counter <= UInt<1>("h00") @[i2c-controller.scala 111:31]
            node _T_206 = eq(beat_counter, UInt<4>("h08")) @[i2c-controller.scala 113:36]
            when _T_206 : @[i2c-controller.scala 113:45]
              beat_counter <= UInt<1>("h00") @[i2c-controller.scala 114:34]
              state <= UInt<3>("h03") @[i2c-controller.scala 115:27]
              skip @[i2c-controller.scala 113:45]
            else : @[i2c-controller.scala 117:28]
              node _T_209 = add(beat_counter, UInt<1>("h01")) @[i2c-controller.scala 118:50]
              node _T_210 = tail(_T_209, 1) @[i2c-controller.scala 118:50]
              beat_counter <= _T_210 @[i2c-controller.scala 118:34]
              skip @[i2c-controller.scala 117:28]
            skip @[i2c-controller.scala 110:34]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_211 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_211 : @[Conditional.scala 39:67]
            sda_state <= UInt<1>("h00") @[i2c-controller.scala 123:23]
            scl_state <= UInt<1>("h01") @[i2c-controller.scala 124:23]
            when beat_finished : @[i2c-controller.scala 126:34]
              clock_counter <= UInt<1>("h00") @[i2c-controller.scala 127:31]
              node _T_214 = sub(packet_size, UInt<1>("h01")) @[i2c-controller.scala 129:53]
              node _T_215 = asUInt(_T_214) @[i2c-controller.scala 129:53]
              node _T_216 = tail(_T_215, 1) @[i2c-controller.scala 129:53]
              node _T_217 = eq(data_counter, _T_216) @[i2c-controller.scala 129:36]
              when _T_217 : @[i2c-controller.scala 129:61]
                state <= UInt<3>("h05") @[i2c-controller.scala 130:27]
                skip @[i2c-controller.scala 129:61]
              else : @[i2c-controller.scala 132:28]
                node _T_219 = add(data_counter, UInt<1>("h01")) @[i2c-controller.scala 133:50]
                node _T_220 = tail(_T_219, 1) @[i2c-controller.scala 133:50]
                data_counter <= _T_220 @[i2c-controller.scala 133:34]
                data_reg[0] <= next_data[0] @[i2c-controller.scala 134:30]
                data_reg[1] <= next_data[1] @[i2c-controller.scala 134:30]
                data_reg[2] <= next_data[2] @[i2c-controller.scala 134:30]
                data_reg[3] <= next_data[3] @[i2c-controller.scala 134:30]
                data_reg[4] <= next_data[4] @[i2c-controller.scala 134:30]
                data_reg[5] <= next_data[5] @[i2c-controller.scala 134:30]
                data_reg[6] <= next_data[6] @[i2c-controller.scala 134:30]
                data_reg[7] <= next_data[7] @[i2c-controller.scala 134:30]
                state <= UInt<3>("h02") @[i2c-controller.scala 135:27]
                skip @[i2c-controller.scala 132:28]
              skip @[i2c-controller.scala 126:34]
            node _T_221 = and(rising_edge, io.i2c.scl_fb) @[i2c-controller.scala 139:31]
            when _T_221 : @[i2c-controller.scala 139:49]
              state <= UInt<3>("h04") @[i2c-controller.scala 140:23]
              skip @[i2c-controller.scala 139:49]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_222 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_222 : @[Conditional.scala 39:67]
              io.error <= UInt<1>("h01") @[i2c-controller.scala 144:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_224 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_224 : @[Conditional.scala 39:67]
                sda_state <= UInt<1>("h01") @[i2c-controller.scala 147:23]
                scl_state <= UInt<1>("h00") @[i2c-controller.scala 148:23]
                when pulse : @[i2c-controller.scala 150:26]
                  state <= UInt<3>("h00") @[i2c-controller.scala 151:23]
                  skip @[i2c-controller.scala 150:26]
                skip @[Conditional.scala 39:67]
    
  module TlcController_2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {i2c_config : {clock_threshold : UInt<64>, clock_period : UInt<64>}, mode1 : UInt<8>, mode2 : UInt<8>, iref : UInt<8>}, flip update : UInt<1>, ready : UInt<1>, i2c : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, flip led_state_in : UInt<2>[16]}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[tlc-controller.scala 21:24]
    inst i2c_ctrl of I2cController_2 @[tlc-controller.scala 23:26]
    i2c_ctrl.clock <= clock
    i2c_ctrl.reset <= reset
    i2c_ctrl.io.config.clock_period <= io.config.i2c_config.clock_period @[tlc-controller.scala 24:24]
    i2c_ctrl.io.config.clock_threshold <= io.config.i2c_config.clock_threshold @[tlc-controller.scala 24:24]
    io.i2c.sda <= i2c_ctrl.io.i2c.sda @[tlc-controller.scala 26:16]
    io.i2c.scl <= i2c_ctrl.io.i2c.scl @[tlc-controller.scala 27:16]
    io.i2c.resetn <= UInt<1>("h01") @[tlc-controller.scala 29:19]
    i2c_ctrl.io.request.valid <= UInt<1>("h00") @[tlc-controller.scala 32:31]
    i2c_ctrl.io.request.bits.size <= UInt<1>("h00") @[tlc-controller.scala 33:35]
    i2c_ctrl.io.request.bits.address <= UInt<1>("h00") @[tlc-controller.scala 34:38]
    i2c_ctrl.io.request.bits.header <= UInt<1>("h00") @[tlc-controller.scala 35:37]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    when i2c_ctrl.io.error : @[tlc-controller.scala 41:30]
      state <= UInt<3>("h04") @[tlc-controller.scala 42:15]
      skip @[tlc-controller.scala 41:30]
    node _T_51 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_51 : @[Conditional.scala 40:58]
      i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
      i2c_ctrl.io.request.bits.size <= UInt<1>("h01") @[tlc-controller.scala 47:39]
      i2c_ctrl.io.request.bits.address <= UInt<8>("h0d6") @[tlc-controller.scala 48:42]
      i2c_ctrl.io.request.bits.header <= UInt<8>("h0a5") @[tlc-controller.scala 49:41]
      node _T_56 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
      when _T_56 : @[tlc-controller.scala 51:43]
        state <= UInt<3>("h01") @[tlc-controller.scala 52:19]
        skip @[tlc-controller.scala 51:43]
      i2c_ctrl.io.request.bits.payload[0] <= UInt<7>("h05a") @[tlc-controller.scala 59:49]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_58 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_58 : @[Conditional.scala 39:67]
        node _T_59 = or(UInt<8>("h080"), UInt<8>("h00")) @[tlc-controller.scala 62:53]
        i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
        i2c_ctrl.io.request.bits.size <= UInt<2>("h02") @[tlc-controller.scala 47:39]
        i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 48:42]
        i2c_ctrl.io.request.bits.header <= _T_59 @[tlc-controller.scala 49:41]
        node _T_62 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
        when _T_62 : @[tlc-controller.scala 51:43]
          state <= UInt<3>("h02") @[tlc-controller.scala 52:19]
          skip @[tlc-controller.scala 51:43]
        i2c_ctrl.io.request.bits.payload[0] <= io.config.mode1 @[tlc-controller.scala 63:49]
        i2c_ctrl.io.request.bits.payload[1] <= io.config.mode2 @[tlc-controller.scala 64:49]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_63 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_63 : @[Conditional.scala 39:67]
          node _T_64 = or(UInt<8>("h080"), UInt<8>("h00")) @[tlc-controller.scala 67:53]
          i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
          i2c_ctrl.io.request.bits.size <= UInt<1>("h01") @[tlc-controller.scala 47:39]
          i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 48:42]
          i2c_ctrl.io.request.bits.header <= _T_64 @[tlc-controller.scala 49:41]
          node _T_67 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
          when _T_67 : @[tlc-controller.scala 51:43]
            state <= UInt<3>("h03") @[tlc-controller.scala 52:19]
            skip @[tlc-controller.scala 51:43]
          i2c_ctrl.io.request.bits.payload[0] <= io.config.iref @[tlc-controller.scala 68:49]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_68 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_68 : @[Conditional.scala 39:67]
            i2c_ctrl.io.request.valid <= io.update @[tlc-controller.scala 71:39]
            i2c_ctrl.io.request.bits.size <= UInt<3>("h04") @[tlc-controller.scala 72:43]
            i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 73:46]
            node _T_70 = or(UInt<8>("h080"), UInt<8>("h014")) @[tlc-controller.scala 74:60]
            i2c_ctrl.io.request.bits.header <= _T_70 @[tlc-controller.scala 74:45]
            node _T_71 = cat(io.led_state_in[1], io.led_state_in[0]) @[Cat.scala 30:58]
            node _T_72 = cat(io.led_state_in[3], io.led_state_in[2]) @[Cat.scala 30:58]
            node _T_73 = cat(_T_72, _T_71) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[0] <= _T_73 @[tlc-controller.scala 77:53]
            node _T_74 = cat(io.led_state_in[5], io.led_state_in[4]) @[Cat.scala 30:58]
            node _T_75 = cat(io.led_state_in[7], io.led_state_in[6]) @[Cat.scala 30:58]
            node _T_76 = cat(_T_75, _T_74) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[1] <= _T_76 @[tlc-controller.scala 77:53]
            node _T_77 = cat(io.led_state_in[9], io.led_state_in[8]) @[Cat.scala 30:58]
            node _T_78 = cat(io.led_state_in[11], io.led_state_in[10]) @[Cat.scala 30:58]
            node _T_79 = cat(_T_78, _T_77) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[2] <= _T_79 @[tlc-controller.scala 77:53]
            node _T_80 = cat(io.led_state_in[13], io.led_state_in[12]) @[Cat.scala 30:58]
            node _T_81 = cat(io.led_state_in[15], io.led_state_in[14]) @[Cat.scala 30:58]
            node _T_82 = cat(_T_81, _T_80) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[3] <= _T_82 @[tlc-controller.scala 77:53]
            io.ready <= i2c_ctrl.io.request.ready @[tlc-controller.scala 85:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_83 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_83 : @[Conditional.scala 39:67]
              io.i2c.resetn <= UInt<1>("h00") @[tlc-controller.scala 88:27]
              skip @[Conditional.scala 39:67]
    
  module I2cController_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {clock_threshold : UInt<64>, clock_period : UInt<64>}, flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {size : UInt<8>, address : UInt<8>, header : UInt<8>, payload : UInt<8>[16]}}, i2c : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, error : UInt<1>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[i2c-controller.scala 16:24]
    reg packet : UInt<8>[18], clock @[i2c-controller.scala 18:21]
    reg packet_size : UInt<8>, clock @[i2c-controller.scala 19:26]
    wire sda_state : UInt @[i2c-controller.scala 21:25]
    wire scl_state : UInt @[i2c-controller.scala 22:25]
    reg clock_counter : UInt<64>, clock @[i2c-controller.scala 24:28]
    reg beat_counter : UInt<64>, clock @[i2c-controller.scala 25:27]
    reg data_counter : UInt<64>, clock @[i2c-controller.scala 26:27]
    node pulse = geq(clock_counter, io.config.clock_threshold) @[i2c-controller.scala 28:31]
    node rising_edge = eq(clock_counter, io.config.clock_threshold) @[i2c-controller.scala 29:37]
    node beat_finished = geq(clock_counter, io.config.clock_period) @[i2c-controller.scala 30:39]
    node _T_56 = add(data_counter, UInt<1>("h01")) @[i2c-controller.scala 32:45]
    node _T_57 = tail(_T_56, 1) @[i2c-controller.scala 32:45]
    node _T_59 = bits(_T_57, 4, 0)
    node _T_60 = bits(packet[_T_59], 0, 0) @[i2c-controller.scala 32:52]
    node _T_61 = bits(packet[_T_59], 1, 1) @[i2c-controller.scala 32:52]
    node _T_62 = bits(packet[_T_59], 2, 2) @[i2c-controller.scala 32:52]
    node _T_63 = bits(packet[_T_59], 3, 3) @[i2c-controller.scala 32:52]
    node _T_64 = bits(packet[_T_59], 4, 4) @[i2c-controller.scala 32:52]
    node _T_65 = bits(packet[_T_59], 5, 5) @[i2c-controller.scala 32:52]
    node _T_66 = bits(packet[_T_59], 6, 6) @[i2c-controller.scala 32:52]
    node _T_67 = bits(packet[_T_59], 7, 7) @[i2c-controller.scala 32:52]
    wire next_data : UInt<1>[8] @[i2c-controller.scala 32:24]
    next_data[0] <= _T_60 @[i2c-controller.scala 32:24]
    next_data[1] <= _T_61 @[i2c-controller.scala 32:24]
    next_data[2] <= _T_62 @[i2c-controller.scala 32:24]
    next_data[3] <= _T_63 @[i2c-controller.scala 32:24]
    next_data[4] <= _T_64 @[i2c-controller.scala 32:24]
    next_data[5] <= _T_65 @[i2c-controller.scala 32:24]
    next_data[6] <= _T_66 @[i2c-controller.scala 32:24]
    next_data[7] <= _T_67 @[i2c-controller.scala 32:24]
    wire _T_90 : UInt<1>[8] @[i2c-controller.scala 33:31]
    _T_90[0] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[1] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[2] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[3] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[4] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[5] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[6] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    _T_90[7] <= UInt<1>("h00") @[i2c-controller.scala 33:31]
    reg data_reg : UInt<1>[8], clock with : (reset => (reset, _T_90)) @[i2c-controller.scala 33:27]
    wire data_out : UInt<1> @[i2c-controller.scala 34:24]
    node _T_152 = eq(UInt<1>("h01"), scl_state) @[Mux.scala 46:19]
    node _T_153 = mux(_T_152, pulse, UInt<1>("h01")) @[Mux.scala 46:16]
    node _T_154 = eq(UInt<1>("h00"), scl_state) @[Mux.scala 46:19]
    node _T_155 = mux(_T_154, UInt<1>("h01"), _T_153) @[Mux.scala 46:16]
    io.i2c.scl <= _T_155 @[i2c-controller.scala 42:16]
    node _T_159 = eq(UInt<2>("h02"), sda_state) @[Mux.scala 46:19]
    node _T_160 = mux(_T_159, data_out, UInt<1>("h01")) @[Mux.scala 46:16]
    node _T_161 = eq(UInt<1>("h01"), sda_state) @[Mux.scala 46:19]
    node _T_162 = mux(_T_161, UInt<1>("h00"), _T_160) @[Mux.scala 46:16]
    node _T_163 = eq(UInt<1>("h00"), sda_state) @[Mux.scala 46:19]
    node _T_164 = mux(_T_163, UInt<1>("h01"), _T_162) @[Mux.scala 46:16]
    io.i2c.sda <= _T_164 @[i2c-controller.scala 45:16]
    sda_state <= UInt<1>("h00") @[i2c-controller.scala 53:15]
    scl_state <= UInt<1>("h00") @[i2c-controller.scala 54:15]
    io.request.ready <= UInt<1>("h00") @[i2c-controller.scala 56:22]
    io.error <= UInt<1>("h00") @[i2c-controller.scala 57:14]
    node _T_170 = bits(beat_counter, 2, 0)
    data_out <= data_reg[_T_170] @[i2c-controller.scala 58:14]
    node _T_172 = add(clock_counter, UInt<1>("h01")) @[i2c-controller.scala 59:36]
    node _T_173 = tail(_T_172, 1) @[i2c-controller.scala 59:36]
    clock_counter <= _T_173 @[i2c-controller.scala 59:19]
    node _T_174 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_174 : @[Conditional.scala 40:58]
      sda_state <= UInt<1>("h00") @[i2c-controller.scala 68:23]
      scl_state <= UInt<1>("h00") @[i2c-controller.scala 69:23]
      io.request.ready <= UInt<1>("h01") @[i2c-controller.scala 72:30]
      node _T_176 = and(io.request.ready, io.request.valid) @[Decoupled.scala 30:37]
      when _T_176 : @[i2c-controller.scala 74:38]
        state <= UInt<3>("h01") @[i2c-controller.scala 75:23]
        packet_size <= io.request.bits.size @[i2c-controller.scala 77:29]
        data_counter <= UInt<1>("h00") @[i2c-controller.scala 79:30]
        clock_counter <= UInt<1>("h00") @[i2c-controller.scala 80:31]
        beat_counter <= UInt<1>("h00") @[i2c-controller.scala 81:30]
        packet[0] <= io.request.bits.address @[i2c-controller.scala 83:27]
        packet[1] <= io.request.bits.header @[i2c-controller.scala 84:27]
        packet[2] <= io.request.bits.payload[0] @[i2c-controller.scala 87:35]
        packet[3] <= io.request.bits.payload[1] @[i2c-controller.scala 87:35]
        packet[4] <= io.request.bits.payload[2] @[i2c-controller.scala 87:35]
        packet[5] <= io.request.bits.payload[3] @[i2c-controller.scala 87:35]
        packet[6] <= io.request.bits.payload[4] @[i2c-controller.scala 87:35]
        packet[7] <= io.request.bits.payload[5] @[i2c-controller.scala 87:35]
        packet[8] <= io.request.bits.payload[6] @[i2c-controller.scala 87:35]
        packet[9] <= io.request.bits.payload[7] @[i2c-controller.scala 87:35]
        packet[10] <= io.request.bits.payload[8] @[i2c-controller.scala 87:35]
        packet[11] <= io.request.bits.payload[9] @[i2c-controller.scala 87:35]
        packet[12] <= io.request.bits.payload[10] @[i2c-controller.scala 87:35]
        packet[13] <= io.request.bits.payload[11] @[i2c-controller.scala 87:35]
        packet[14] <= io.request.bits.payload[12] @[i2c-controller.scala 87:35]
        packet[15] <= io.request.bits.payload[13] @[i2c-controller.scala 87:35]
        packet[16] <= io.request.bits.payload[14] @[i2c-controller.scala 87:35]
        packet[17] <= io.request.bits.payload[15] @[i2c-controller.scala 87:35]
        skip @[i2c-controller.scala 74:38]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_180 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_180 : @[Conditional.scala 39:67]
        sda_state <= UInt<1>("h01") @[i2c-controller.scala 95:23]
        scl_state <= UInt<1>("h00") @[i2c-controller.scala 96:23]
        when pulse : @[i2c-controller.scala 100:26]
          clock_counter <= UInt<1>("h00") @[i2c-controller.scala 101:31]
          node _T_182 = bits(packet[0], 0, 0) @[i2c-controller.scala 102:43]
          node _T_183 = bits(packet[0], 1, 1) @[i2c-controller.scala 102:43]
          node _T_184 = bits(packet[0], 2, 2) @[i2c-controller.scala 102:43]
          node _T_185 = bits(packet[0], 3, 3) @[i2c-controller.scala 102:43]
          node _T_186 = bits(packet[0], 4, 4) @[i2c-controller.scala 102:43]
          node _T_187 = bits(packet[0], 5, 5) @[i2c-controller.scala 102:43]
          node _T_188 = bits(packet[0], 6, 6) @[i2c-controller.scala 102:43]
          node _T_189 = bits(packet[0], 7, 7) @[i2c-controller.scala 102:43]
          wire _T_192 : UInt<1>[8] @[i2c-controller.scala 102:32]
          _T_192[0] <= _T_182 @[i2c-controller.scala 102:32]
          _T_192[1] <= _T_183 @[i2c-controller.scala 102:32]
          _T_192[2] <= _T_184 @[i2c-controller.scala 102:32]
          _T_192[3] <= _T_185 @[i2c-controller.scala 102:32]
          _T_192[4] <= _T_186 @[i2c-controller.scala 102:32]
          _T_192[5] <= _T_187 @[i2c-controller.scala 102:32]
          _T_192[6] <= _T_188 @[i2c-controller.scala 102:32]
          _T_192[7] <= _T_189 @[i2c-controller.scala 102:32]
          data_reg[0] <= _T_192[0] @[i2c-controller.scala 102:26]
          data_reg[1] <= _T_192[1] @[i2c-controller.scala 102:26]
          data_reg[2] <= _T_192[2] @[i2c-controller.scala 102:26]
          data_reg[3] <= _T_192[3] @[i2c-controller.scala 102:26]
          data_reg[4] <= _T_192[4] @[i2c-controller.scala 102:26]
          data_reg[5] <= _T_192[5] @[i2c-controller.scala 102:26]
          data_reg[6] <= _T_192[6] @[i2c-controller.scala 102:26]
          data_reg[7] <= _T_192[7] @[i2c-controller.scala 102:26]
          state <= UInt<3>("h02") @[i2c-controller.scala 103:23]
          skip @[i2c-controller.scala 100:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_203 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_203 : @[Conditional.scala 39:67]
          sda_state <= UInt<2>("h02") @[i2c-controller.scala 107:23]
          scl_state <= UInt<1>("h01") @[i2c-controller.scala 108:23]
          when beat_finished : @[i2c-controller.scala 110:34]
            clock_counter <= UInt<1>("h00") @[i2c-controller.scala 111:31]
            node _T_206 = eq(beat_counter, UInt<4>("h08")) @[i2c-controller.scala 113:36]
            when _T_206 : @[i2c-controller.scala 113:45]
              beat_counter <= UInt<1>("h00") @[i2c-controller.scala 114:34]
              state <= UInt<3>("h03") @[i2c-controller.scala 115:27]
              skip @[i2c-controller.scala 113:45]
            else : @[i2c-controller.scala 117:28]
              node _T_209 = add(beat_counter, UInt<1>("h01")) @[i2c-controller.scala 118:50]
              node _T_210 = tail(_T_209, 1) @[i2c-controller.scala 118:50]
              beat_counter <= _T_210 @[i2c-controller.scala 118:34]
              skip @[i2c-controller.scala 117:28]
            skip @[i2c-controller.scala 110:34]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_211 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_211 : @[Conditional.scala 39:67]
            sda_state <= UInt<1>("h00") @[i2c-controller.scala 123:23]
            scl_state <= UInt<1>("h01") @[i2c-controller.scala 124:23]
            when beat_finished : @[i2c-controller.scala 126:34]
              clock_counter <= UInt<1>("h00") @[i2c-controller.scala 127:31]
              node _T_214 = sub(packet_size, UInt<1>("h01")) @[i2c-controller.scala 129:53]
              node _T_215 = asUInt(_T_214) @[i2c-controller.scala 129:53]
              node _T_216 = tail(_T_215, 1) @[i2c-controller.scala 129:53]
              node _T_217 = eq(data_counter, _T_216) @[i2c-controller.scala 129:36]
              when _T_217 : @[i2c-controller.scala 129:61]
                state <= UInt<3>("h05") @[i2c-controller.scala 130:27]
                skip @[i2c-controller.scala 129:61]
              else : @[i2c-controller.scala 132:28]
                node _T_219 = add(data_counter, UInt<1>("h01")) @[i2c-controller.scala 133:50]
                node _T_220 = tail(_T_219, 1) @[i2c-controller.scala 133:50]
                data_counter <= _T_220 @[i2c-controller.scala 133:34]
                data_reg[0] <= next_data[0] @[i2c-controller.scala 134:30]
                data_reg[1] <= next_data[1] @[i2c-controller.scala 134:30]
                data_reg[2] <= next_data[2] @[i2c-controller.scala 134:30]
                data_reg[3] <= next_data[3] @[i2c-controller.scala 134:30]
                data_reg[4] <= next_data[4] @[i2c-controller.scala 134:30]
                data_reg[5] <= next_data[5] @[i2c-controller.scala 134:30]
                data_reg[6] <= next_data[6] @[i2c-controller.scala 134:30]
                data_reg[7] <= next_data[7] @[i2c-controller.scala 134:30]
                state <= UInt<3>("h02") @[i2c-controller.scala 135:27]
                skip @[i2c-controller.scala 132:28]
              skip @[i2c-controller.scala 126:34]
            node _T_221 = and(rising_edge, io.i2c.scl_fb) @[i2c-controller.scala 139:31]
            when _T_221 : @[i2c-controller.scala 139:49]
              state <= UInt<3>("h04") @[i2c-controller.scala 140:23]
              skip @[i2c-controller.scala 139:49]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_222 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_222 : @[Conditional.scala 39:67]
              io.error <= UInt<1>("h01") @[i2c-controller.scala 144:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_224 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_224 : @[Conditional.scala 39:67]
                sda_state <= UInt<1>("h01") @[i2c-controller.scala 147:23]
                scl_state <= UInt<1>("h00") @[i2c-controller.scala 148:23]
                when pulse : @[i2c-controller.scala 150:26]
                  state <= UInt<3>("h00") @[i2c-controller.scala 151:23]
                  skip @[i2c-controller.scala 150:26]
                skip @[Conditional.scala 39:67]
    
  module TlcController_3 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip config : {i2c_config : {clock_threshold : UInt<64>, clock_period : UInt<64>}, mode1 : UInt<8>, mode2 : UInt<8>, iref : UInt<8>}, flip update : UInt<1>, ready : UInt<1>, i2c : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, flip led_state_in : UInt<2>[16]}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[tlc-controller.scala 21:24]
    inst i2c_ctrl of I2cController_3 @[tlc-controller.scala 23:26]
    i2c_ctrl.clock <= clock
    i2c_ctrl.reset <= reset
    i2c_ctrl.io.config.clock_period <= io.config.i2c_config.clock_period @[tlc-controller.scala 24:24]
    i2c_ctrl.io.config.clock_threshold <= io.config.i2c_config.clock_threshold @[tlc-controller.scala 24:24]
    io.i2c.sda <= i2c_ctrl.io.i2c.sda @[tlc-controller.scala 26:16]
    io.i2c.scl <= i2c_ctrl.io.i2c.scl @[tlc-controller.scala 27:16]
    io.i2c.resetn <= UInt<1>("h01") @[tlc-controller.scala 29:19]
    i2c_ctrl.io.request.valid <= UInt<1>("h00") @[tlc-controller.scala 32:31]
    i2c_ctrl.io.request.bits.size <= UInt<1>("h00") @[tlc-controller.scala 33:35]
    i2c_ctrl.io.request.bits.address <= UInt<1>("h00") @[tlc-controller.scala 34:38]
    i2c_ctrl.io.request.bits.header <= UInt<1>("h00") @[tlc-controller.scala 35:37]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    i2c_ctrl.io.request.bits.payload[0] <= UInt<1>("h00") @[tlc-controller.scala 38:45]
    when i2c_ctrl.io.error : @[tlc-controller.scala 41:30]
      state <= UInt<3>("h04") @[tlc-controller.scala 42:15]
      skip @[tlc-controller.scala 41:30]
    node _T_51 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_51 : @[Conditional.scala 40:58]
      i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
      i2c_ctrl.io.request.bits.size <= UInt<1>("h01") @[tlc-controller.scala 47:39]
      i2c_ctrl.io.request.bits.address <= UInt<8>("h0d6") @[tlc-controller.scala 48:42]
      i2c_ctrl.io.request.bits.header <= UInt<8>("h0a5") @[tlc-controller.scala 49:41]
      node _T_56 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
      when _T_56 : @[tlc-controller.scala 51:43]
        state <= UInt<3>("h01") @[tlc-controller.scala 52:19]
        skip @[tlc-controller.scala 51:43]
      i2c_ctrl.io.request.bits.payload[0] <= UInt<7>("h05a") @[tlc-controller.scala 59:49]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_58 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_58 : @[Conditional.scala 39:67]
        node _T_59 = or(UInt<8>("h080"), UInt<8>("h00")) @[tlc-controller.scala 62:53]
        i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
        i2c_ctrl.io.request.bits.size <= UInt<2>("h02") @[tlc-controller.scala 47:39]
        i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 48:42]
        i2c_ctrl.io.request.bits.header <= _T_59 @[tlc-controller.scala 49:41]
        node _T_62 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
        when _T_62 : @[tlc-controller.scala 51:43]
          state <= UInt<3>("h02") @[tlc-controller.scala 52:19]
          skip @[tlc-controller.scala 51:43]
        i2c_ctrl.io.request.bits.payload[0] <= io.config.mode1 @[tlc-controller.scala 63:49]
        i2c_ctrl.io.request.bits.payload[1] <= io.config.mode2 @[tlc-controller.scala 64:49]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_63 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_63 : @[Conditional.scala 39:67]
          node _T_64 = or(UInt<8>("h080"), UInt<8>("h00")) @[tlc-controller.scala 67:53]
          i2c_ctrl.io.request.valid <= UInt<1>("h01") @[tlc-controller.scala 46:35]
          i2c_ctrl.io.request.bits.size <= UInt<1>("h01") @[tlc-controller.scala 47:39]
          i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 48:42]
          i2c_ctrl.io.request.bits.header <= _T_64 @[tlc-controller.scala 49:41]
          node _T_67 = and(i2c_ctrl.io.request.ready, i2c_ctrl.io.request.valid) @[Decoupled.scala 30:37]
          when _T_67 : @[tlc-controller.scala 51:43]
            state <= UInt<3>("h03") @[tlc-controller.scala 52:19]
            skip @[tlc-controller.scala 51:43]
          i2c_ctrl.io.request.bits.payload[0] <= io.config.iref @[tlc-controller.scala 68:49]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_68 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_68 : @[Conditional.scala 39:67]
            i2c_ctrl.io.request.valid <= io.update @[tlc-controller.scala 71:39]
            i2c_ctrl.io.request.bits.size <= UInt<3>("h04") @[tlc-controller.scala 72:43]
            i2c_ctrl.io.request.bits.address <= UInt<8>("h08") @[tlc-controller.scala 73:46]
            node _T_70 = or(UInt<8>("h080"), UInt<8>("h014")) @[tlc-controller.scala 74:60]
            i2c_ctrl.io.request.bits.header <= _T_70 @[tlc-controller.scala 74:45]
            node _T_71 = cat(io.led_state_in[1], io.led_state_in[0]) @[Cat.scala 30:58]
            node _T_72 = cat(io.led_state_in[3], io.led_state_in[2]) @[Cat.scala 30:58]
            node _T_73 = cat(_T_72, _T_71) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[0] <= _T_73 @[tlc-controller.scala 77:53]
            node _T_74 = cat(io.led_state_in[5], io.led_state_in[4]) @[Cat.scala 30:58]
            node _T_75 = cat(io.led_state_in[7], io.led_state_in[6]) @[Cat.scala 30:58]
            node _T_76 = cat(_T_75, _T_74) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[1] <= _T_76 @[tlc-controller.scala 77:53]
            node _T_77 = cat(io.led_state_in[9], io.led_state_in[8]) @[Cat.scala 30:58]
            node _T_78 = cat(io.led_state_in[11], io.led_state_in[10]) @[Cat.scala 30:58]
            node _T_79 = cat(_T_78, _T_77) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[2] <= _T_79 @[tlc-controller.scala 77:53]
            node _T_80 = cat(io.led_state_in[13], io.led_state_in[12]) @[Cat.scala 30:58]
            node _T_81 = cat(io.led_state_in[15], io.led_state_in[14]) @[Cat.scala 30:58]
            node _T_82 = cat(_T_81, _T_80) @[Cat.scala 30:58]
            i2c_ctrl.io.request.bits.payload[3] <= _T_82 @[tlc-controller.scala 77:53]
            io.ready <= i2c_ctrl.io.request.ready @[tlc-controller.scala 85:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_83 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_83 : @[Conditional.scala 39:67]
              io.i2c.resetn <= UInt<1>("h00") @[tlc-controller.scala 88:27]
              skip @[Conditional.scala 39:67]
    
  module RefreshController : 
    input clock : Clock
    input reset : UInt<1>
    output io : {i2c0 : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, i2c1 : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, i2c2 : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, i2c3 : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}}
    
    inst TlcController of TlcController @[refresh-controller.scala 18:32]
    TlcController.clock <= clock
    TlcController.reset <= reset
    inst TlcController_1 of TlcController_1 @[refresh-controller.scala 18:32]
    TlcController_1.clock <= clock
    TlcController_1.reset <= reset
    inst TlcController_2 of TlcController_2 @[refresh-controller.scala 18:32]
    TlcController_2.clock <= clock
    TlcController_2.reset <= reset
    inst TlcController_3 of TlcController_3 @[refresh-controller.scala 18:32]
    TlcController_3.clock <= clock
    TlcController_3.reset <= reset
    wire controllers : {flip config : {i2c_config : {clock_threshold : UInt<64>, clock_period : UInt<64>}, mode1 : UInt<8>, mode2 : UInt<8>, iref : UInt<8>}, flip update : UInt<1>, ready : UInt<1>, i2c : {scl : UInt<1>, scl_fb : UInt<1>, sda : UInt<1>, resetn : UInt<1>}, flip led_state_in : UInt<2>[16]}[4] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[0] <= controllers[0].led_state_in[0] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[1] <= controllers[0].led_state_in[1] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[2] <= controllers[0].led_state_in[2] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[3] <= controllers[0].led_state_in[3] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[4] <= controllers[0].led_state_in[4] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[5] <= controllers[0].led_state_in[5] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[6] <= controllers[0].led_state_in[6] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[7] <= controllers[0].led_state_in[7] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[8] <= controllers[0].led_state_in[8] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[9] <= controllers[0].led_state_in[9] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[10] <= controllers[0].led_state_in[10] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[11] <= controllers[0].led_state_in[11] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[12] <= controllers[0].led_state_in[12] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[13] <= controllers[0].led_state_in[13] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[14] <= controllers[0].led_state_in[14] @[refresh-controller.scala 18:12]
    TlcController.io.led_state_in[15] <= controllers[0].led_state_in[15] @[refresh-controller.scala 18:12]
    controllers[0].i2c.resetn <= TlcController.io.i2c.resetn @[refresh-controller.scala 18:12]
    controllers[0].i2c.sda <= TlcController.io.i2c.sda @[refresh-controller.scala 18:12]
    controllers[0].i2c.scl_fb <= TlcController.io.i2c.scl_fb @[refresh-controller.scala 18:12]
    controllers[0].i2c.scl <= TlcController.io.i2c.scl @[refresh-controller.scala 18:12]
    controllers[0].ready <= TlcController.io.ready @[refresh-controller.scala 18:12]
    TlcController.io.update <= controllers[0].update @[refresh-controller.scala 18:12]
    TlcController.io.config.iref <= controllers[0].config.iref @[refresh-controller.scala 18:12]
    TlcController.io.config.mode2 <= controllers[0].config.mode2 @[refresh-controller.scala 18:12]
    TlcController.io.config.mode1 <= controllers[0].config.mode1 @[refresh-controller.scala 18:12]
    TlcController.io.config.i2c_config.clock_period <= controllers[0].config.i2c_config.clock_period @[refresh-controller.scala 18:12]
    TlcController.io.config.i2c_config.clock_threshold <= controllers[0].config.i2c_config.clock_threshold @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[0] <= controllers[1].led_state_in[0] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[1] <= controllers[1].led_state_in[1] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[2] <= controllers[1].led_state_in[2] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[3] <= controllers[1].led_state_in[3] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[4] <= controllers[1].led_state_in[4] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[5] <= controllers[1].led_state_in[5] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[6] <= controllers[1].led_state_in[6] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[7] <= controllers[1].led_state_in[7] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[8] <= controllers[1].led_state_in[8] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[9] <= controllers[1].led_state_in[9] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[10] <= controllers[1].led_state_in[10] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[11] <= controllers[1].led_state_in[11] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[12] <= controllers[1].led_state_in[12] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[13] <= controllers[1].led_state_in[13] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[14] <= controllers[1].led_state_in[14] @[refresh-controller.scala 18:12]
    TlcController_1.io.led_state_in[15] <= controllers[1].led_state_in[15] @[refresh-controller.scala 18:12]
    controllers[1].i2c.resetn <= TlcController_1.io.i2c.resetn @[refresh-controller.scala 18:12]
    controllers[1].i2c.sda <= TlcController_1.io.i2c.sda @[refresh-controller.scala 18:12]
    controllers[1].i2c.scl_fb <= TlcController_1.io.i2c.scl_fb @[refresh-controller.scala 18:12]
    controllers[1].i2c.scl <= TlcController_1.io.i2c.scl @[refresh-controller.scala 18:12]
    controllers[1].ready <= TlcController_1.io.ready @[refresh-controller.scala 18:12]
    TlcController_1.io.update <= controllers[1].update @[refresh-controller.scala 18:12]
    TlcController_1.io.config.iref <= controllers[1].config.iref @[refresh-controller.scala 18:12]
    TlcController_1.io.config.mode2 <= controllers[1].config.mode2 @[refresh-controller.scala 18:12]
    TlcController_1.io.config.mode1 <= controllers[1].config.mode1 @[refresh-controller.scala 18:12]
    TlcController_1.io.config.i2c_config.clock_period <= controllers[1].config.i2c_config.clock_period @[refresh-controller.scala 18:12]
    TlcController_1.io.config.i2c_config.clock_threshold <= controllers[1].config.i2c_config.clock_threshold @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[0] <= controllers[2].led_state_in[0] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[1] <= controllers[2].led_state_in[1] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[2] <= controllers[2].led_state_in[2] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[3] <= controllers[2].led_state_in[3] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[4] <= controllers[2].led_state_in[4] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[5] <= controllers[2].led_state_in[5] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[6] <= controllers[2].led_state_in[6] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[7] <= controllers[2].led_state_in[7] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[8] <= controllers[2].led_state_in[8] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[9] <= controllers[2].led_state_in[9] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[10] <= controllers[2].led_state_in[10] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[11] <= controllers[2].led_state_in[11] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[12] <= controllers[2].led_state_in[12] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[13] <= controllers[2].led_state_in[13] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[14] <= controllers[2].led_state_in[14] @[refresh-controller.scala 18:12]
    TlcController_2.io.led_state_in[15] <= controllers[2].led_state_in[15] @[refresh-controller.scala 18:12]
    controllers[2].i2c.resetn <= TlcController_2.io.i2c.resetn @[refresh-controller.scala 18:12]
    controllers[2].i2c.sda <= TlcController_2.io.i2c.sda @[refresh-controller.scala 18:12]
    controllers[2].i2c.scl_fb <= TlcController_2.io.i2c.scl_fb @[refresh-controller.scala 18:12]
    controllers[2].i2c.scl <= TlcController_2.io.i2c.scl @[refresh-controller.scala 18:12]
    controllers[2].ready <= TlcController_2.io.ready @[refresh-controller.scala 18:12]
    TlcController_2.io.update <= controllers[2].update @[refresh-controller.scala 18:12]
    TlcController_2.io.config.iref <= controllers[2].config.iref @[refresh-controller.scala 18:12]
    TlcController_2.io.config.mode2 <= controllers[2].config.mode2 @[refresh-controller.scala 18:12]
    TlcController_2.io.config.mode1 <= controllers[2].config.mode1 @[refresh-controller.scala 18:12]
    TlcController_2.io.config.i2c_config.clock_period <= controllers[2].config.i2c_config.clock_period @[refresh-controller.scala 18:12]
    TlcController_2.io.config.i2c_config.clock_threshold <= controllers[2].config.i2c_config.clock_threshold @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[0] <= controllers[3].led_state_in[0] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[1] <= controllers[3].led_state_in[1] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[2] <= controllers[3].led_state_in[2] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[3] <= controllers[3].led_state_in[3] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[4] <= controllers[3].led_state_in[4] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[5] <= controllers[3].led_state_in[5] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[6] <= controllers[3].led_state_in[6] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[7] <= controllers[3].led_state_in[7] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[8] <= controllers[3].led_state_in[8] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[9] <= controllers[3].led_state_in[9] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[10] <= controllers[3].led_state_in[10] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[11] <= controllers[3].led_state_in[11] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[12] <= controllers[3].led_state_in[12] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[13] <= controllers[3].led_state_in[13] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[14] <= controllers[3].led_state_in[14] @[refresh-controller.scala 18:12]
    TlcController_3.io.led_state_in[15] <= controllers[3].led_state_in[15] @[refresh-controller.scala 18:12]
    controllers[3].i2c.resetn <= TlcController_3.io.i2c.resetn @[refresh-controller.scala 18:12]
    controllers[3].i2c.sda <= TlcController_3.io.i2c.sda @[refresh-controller.scala 18:12]
    controllers[3].i2c.scl_fb <= TlcController_3.io.i2c.scl_fb @[refresh-controller.scala 18:12]
    controllers[3].i2c.scl <= TlcController_3.io.i2c.scl @[refresh-controller.scala 18:12]
    controllers[3].ready <= TlcController_3.io.ready @[refresh-controller.scala 18:12]
    TlcController_3.io.update <= controllers[3].update @[refresh-controller.scala 18:12]
    TlcController_3.io.config.iref <= controllers[3].config.iref @[refresh-controller.scala 18:12]
    TlcController_3.io.config.mode2 <= controllers[3].config.mode2 @[refresh-controller.scala 18:12]
    TlcController_3.io.config.mode1 <= controllers[3].config.mode1 @[refresh-controller.scala 18:12]
    TlcController_3.io.config.i2c_config.clock_period <= controllers[3].config.i2c_config.clock_period @[refresh-controller.scala 18:12]
    TlcController_3.io.config.i2c_config.clock_threshold <= controllers[3].config.i2c_config.clock_threshold @[refresh-controller.scala 18:12]
    controllers[0].config.mode1 <= UInt<5>("h011") @[refresh-controller.scala 22:37]
    controllers[0].config.mode2 <= UInt<1>("h00") @[refresh-controller.scala 23:37]
    controllers[0].config.iref <= UInt<8>("h0cf") @[refresh-controller.scala 24:36]
    controllers[0].config.i2c_config.clock_threshold <= UInt<3>("h04") @[refresh-controller.scala 25:58]
    controllers[0].config.i2c_config.clock_period <= UInt<4>("h08") @[refresh-controller.scala 26:55]
    controllers[0].update <= UInt<1>("h01") @[refresh-controller.scala 28:31]
    controllers[0].led_state_in[0] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[1] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[2] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[3] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[4] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[5] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[6] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[7] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[8] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[9] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[10] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[11] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[12] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[13] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[14] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[0].led_state_in[15] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    io.i2c0.resetn <= controllers[0].i2c.resetn @[refresh-controller.scala 34:42]
    io.i2c0.sda <= controllers[0].i2c.sda @[refresh-controller.scala 34:42]
    io.i2c0.scl_fb <= controllers[0].i2c.scl_fb @[refresh-controller.scala 34:42]
    io.i2c0.scl <= controllers[0].i2c.scl @[refresh-controller.scala 34:42]
    controllers[1].config.mode1 <= UInt<5>("h011") @[refresh-controller.scala 22:37]
    controllers[1].config.mode2 <= UInt<1>("h00") @[refresh-controller.scala 23:37]
    controllers[1].config.iref <= UInt<8>("h0cf") @[refresh-controller.scala 24:36]
    controllers[1].config.i2c_config.clock_threshold <= UInt<3>("h04") @[refresh-controller.scala 25:58]
    controllers[1].config.i2c_config.clock_period <= UInt<4>("h08") @[refresh-controller.scala 26:55]
    controllers[1].update <= UInt<1>("h01") @[refresh-controller.scala 28:31]
    controllers[1].led_state_in[0] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[1] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[2] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[3] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[4] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[5] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[6] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[7] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[8] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[9] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[10] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[11] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[12] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[13] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[14] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[1].led_state_in[15] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    io.i2c1.resetn <= controllers[1].i2c.resetn @[refresh-controller.scala 35:42]
    io.i2c1.sda <= controllers[1].i2c.sda @[refresh-controller.scala 35:42]
    io.i2c1.scl_fb <= controllers[1].i2c.scl_fb @[refresh-controller.scala 35:42]
    io.i2c1.scl <= controllers[1].i2c.scl @[refresh-controller.scala 35:42]
    controllers[2].config.mode1 <= UInt<5>("h011") @[refresh-controller.scala 22:37]
    controllers[2].config.mode2 <= UInt<1>("h00") @[refresh-controller.scala 23:37]
    controllers[2].config.iref <= UInt<8>("h0cf") @[refresh-controller.scala 24:36]
    controllers[2].config.i2c_config.clock_threshold <= UInt<3>("h04") @[refresh-controller.scala 25:58]
    controllers[2].config.i2c_config.clock_period <= UInt<4>("h08") @[refresh-controller.scala 26:55]
    controllers[2].update <= UInt<1>("h01") @[refresh-controller.scala 28:31]
    controllers[2].led_state_in[0] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[1] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[2] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[3] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[4] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[5] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[6] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[7] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[8] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[9] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[10] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[11] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[12] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[13] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[14] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[2].led_state_in[15] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    io.i2c2.resetn <= controllers[2].i2c.resetn @[refresh-controller.scala 36:42]
    io.i2c2.sda <= controllers[2].i2c.sda @[refresh-controller.scala 36:42]
    io.i2c2.scl_fb <= controllers[2].i2c.scl_fb @[refresh-controller.scala 36:42]
    io.i2c2.scl <= controllers[2].i2c.scl @[refresh-controller.scala 36:42]
    controllers[3].config.mode1 <= UInt<5>("h011") @[refresh-controller.scala 22:37]
    controllers[3].config.mode2 <= UInt<1>("h00") @[refresh-controller.scala 23:37]
    controllers[3].config.iref <= UInt<8>("h0cf") @[refresh-controller.scala 24:36]
    controllers[3].config.i2c_config.clock_threshold <= UInt<3>("h04") @[refresh-controller.scala 25:58]
    controllers[3].config.i2c_config.clock_period <= UInt<4>("h08") @[refresh-controller.scala 26:55]
    controllers[3].update <= UInt<1>("h01") @[refresh-controller.scala 28:31]
    controllers[3].led_state_in[0] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[1] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[2] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[3] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[4] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[5] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[6] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[7] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[8] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[9] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[10] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[11] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[12] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[13] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[14] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    controllers[3].led_state_in[15] <= UInt<1>("h01") @[refresh-controller.scala 30:44]
    io.i2c3.resetn <= controllers[3].i2c.resetn @[refresh-controller.scala 37:42]
    io.i2c3.sda <= controllers[3].i2c.sda @[refresh-controller.scala 37:42]
    io.i2c3.scl_fb <= controllers[3].i2c.scl_fb @[refresh-controller.scala 37:42]
    io.i2c3.scl <= controllers[3].i2c.scl @[refresh-controller.scala 37:42]
    
